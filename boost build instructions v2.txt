 1) `c/Users/arkay7777/Documents/boost build.sh` automates the instructions in "boost build instructions v1.txt".
    Full build takes about 1.5 hours on an i7-6600u processor.
 2) Verify that the installation occurred correctly
    `cd /c/Software/boost/boost_1_73_0_gcc1010_posix_sjlj`
    `cd /c/Software/boost/boost_1_73_0_gcc1010_posix_seh`
    `cd /c/Software/boost/boost_1_73_0_gcc1010_win32_sjlj`
    `cd /c/Software/boost/boost_1_73_0_gcc1010_win32_seh`
    AND verify correct bitness of the 32- and 64-bit builds
    `objdump -a /c/Software/boost/boost_1_73_0_gcc1010_posix_sjlj/lib/libboost_regex-mgw93-mt-x32-1_73.a`
    `objdump -a /c/Software/boost/boost_1_73_0_gcc1010_posix_sjlj/lib/libboost_regex-mgw93-mt-x64-1_73.a`
 3) Create an archive with toplevel folder such as "boost_1_73_0_gcc1010_posix_seh" by `cd /c/Software/boost`
    `7za a -t7z -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on /c/Users/arkay7777/Desktop/boost_1_73_0_gcc1010_posix_sjlj-rev0.7z boost_1_73_0_gcc1010_posix_sjlj/`
    `7za a -t7z -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on /c/Users/arkay7777/Desktop/boost_1_73_0_gcc1010_posix_seh-rev0.7z boost_1_73_0_gcc1010_posix_seh/`
    `7za a -t7z -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on /c/Users/arkay7777/Desktop/boost_1_73_0_gcc1010_win32_sjlj-rev0.7z boost_1_73_0_gcc1010_win32_sjlj/`
    `7za a -t7z -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on /c/Users/arkay7777/Desktop/boost_1_73_0_gcc1010_win32_seh-rev0.7z boost_1_73_0_gcc1010_win32_seh/`
    or create an archive with "include" and "lib" as the toplevel directories
    `7za a -t7z -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on /c/Users/arkay7777/Desktop/boost_1_73_0_gcc1010_posix_sjlj-rev0.7z .`
    `7za a -t7z -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on /c/Users/arkay7777/Desktop/boost_1_73_0_gcc1010_posix_seh-rev0.7z .`
    `7za a -t7z -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on /c/Users/arkay7777/Desktop/boost_1_73_0_gcc1010_win32_sjlj-rev0.7z .`
    `7za a -t7z -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on /c/Users/arkay7777/Desktop/boost_1_73_0_gcc1010_win32_seh-rev0.7z .`
 4) For compiling, set -m32 or -m64 when using win32-sjlj multilib enabled g++, set necessary includes
    `g++ -m64 -Wall -O2 -I /mingw32/opt/include/boost-1_73/ -I /mingw32/opt/include/mingw-std-threads -c boost_floating_point_examples.cpp -o boost_floating_point_examples.o`
 5) Set -m32 or -m64 when using win32-sjlj multilib enabled g++, also ensure static linkage of gcc libs otherwise there will
    confusion between 32 and 64 bit libraries for functions like cout.
    `g++ -m64 -O2 -static -s -Wall -L/mingw32/opt/lib/ boost_floating_point_examples.o -o boost_floating_point_examples.exe`
 6) Test whether the executable is 32- or 64-bit
    `file boost_floating_point_examples.exe`
 7) Look for DLL dependencies
    `objdump -x boost_floating_point_examples.exe | grep -i "DLL Name"`
 8) Run executable!
    `./boost_floating_point_examples.exe`

