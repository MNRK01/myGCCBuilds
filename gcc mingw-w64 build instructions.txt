 1) Disable McAfee's (or any other antivirus) Real Time Scanning
 2) Download msys2-base-x64_86-YYYYMMDD.tar.xz
 3) Unpack it into <msys root dir>
 4) Goto <msys root dir> and double click on msys2.exe, following the instructions on the screen
 5) Run msys2.exe, run `pacman -Syuu` at the msys2 prompt until all the packages are updated
#   {msys2-devel, mingw-w64-i686-toolchain, mingw-w64-x86_64-toolchain} install the necessary gcc later during the building process
 6) `pacman -S base-devel vim`
#   The next set of packages do not need to be installed until Step 21 (./build --help) is run later
 7) `pacman -S subversion zip p7zip sshpass dejagnu`
 8) `pacman -Scc` to clean up the install [optional]
 9) `cd /home && mkdir <user>`
10) `HOME=/home/<user>` to prevent gcc from being built in some alternate %HOME%
11) `echo $HOME` to test if $HOME is not some alternate %HOME%
12) `cd` into your new $HOME
#   Use the DEVELOP branch and not the MASTER repository
13) `cd && git clone --branch develop https://github.com/niXman/mingw-builds.git`
#   patch was built via `diff -ur --exclude=toolchains --exclude='*git*' mingw-builds-orig/ mingw-builds/ > /path/to/mingw-builds.patch`
14) `cd mingw-builds` and `patch -uN -p 1 --binary --verbose -d mingw-builds/ < /path/to/mingw-builds.patch`
15) `ls` to check if <mingw-builds> directory was created
16) `cd /` and `rm /MinGW` if it exists
17) `echo $PATH` to check that the $PATH is not contaminated
18) `gcc -v` to also ensure no gcc is on the $PATH
19) `cd && cd mingw-builds`
20) Turn off the power settings for the computer so that it doesn't go to sleep during the build
21) `./build --help` to determine if (a) all necessary software is available (see Step 6) and (b) options for building gcc
#   the build process adds the following flags, among others on its own:
#   --cppflags='', --cflags='-O2 -pipe -fno-ident', --cxxflags='-O2 -pipe -fno-ident', --ldflags='-pipe -fno-ident -Wl,--large-address-aware'
#   adding --use-lto causes the build to crash with undefined references to rpl_printf(...) and related IO functions
#   the use of --static-gcc is unnecessary and was used to try to unsuccessfully build with --use-lto
#   building i686 multilib gcc will result in the building of certain i686 and x86_64 libs so always build the i686 gcc first
#   building i686 multilib will download i686 and x86_64 gcc toolchains into the mingw-builds folder as the first step
22) `./build --mode=gcc-8.2.0 --arch=i686 --threads=posix --exceptions=sjlj --enable-languages=c,c++,fortran --rt-version=v6 --jobs=4 --rev=0`
    `./build --mode=gcc-8.2.0 --arch=i686 --threads=win32 --exceptions=sjlj --enable-languages=c,c++,fortran --rt-version=v6 --jobs=4 --rev=0`
    `./build --mode=gcc-8.2.0 --arch=x86_64 --threads=posix --exceptions=seh --enable-languages=c,c++,fortran --rt-version=v6 --jobs=4 --rev=0`
    `./build --mode=gcc-8.2.0 --arch=x86_64 --threads=win32 --exceptions=seh --enable-languages=c,c++,fortran --rt-version=v6 --jobs=4 --rev=0`
23) Wait for ~4 hours (i7-6600U) as each build finishes
24) Turn on the power settings for the computer so that it goes to sleep after 20 minutes
25) Reactivate McAfee's Real Time Scanning

